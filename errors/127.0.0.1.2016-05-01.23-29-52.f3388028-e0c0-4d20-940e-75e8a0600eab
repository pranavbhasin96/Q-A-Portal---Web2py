(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> unsupported operand type(s) for &: 'str' and 'Field'"
p3
sS'layer'
p4
S'/home/pranav/sem2/ITWS2/web2py/applications/quora/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\n@auth.requires_login()\ndef alllist():\n\tif len(request.args): page=int(request.args[0])\n\telse: page=0\n\titems_per_page=10\n\tlimitby=(page*items_per_page,(page+1)*items_per_page+1)\n\ttopics=db().select(db.tags.ALL, limitby=limitby)\n\treturn dict(page=page, items_per_page=items_per_page,user=user,topics=topics)\n\ndef subscribe():\n\tvars=request.post_vars\n\ttag=str(vars.tagid)\n\tsubscriptions=auth.user.subscribed\n\tif tag not in subscriptions:\n\t\tsubscriptions.insert(0,tag)\n\telse:\n\t\tsubscriptions.remove(tag)\n\trow=db(db.auth_user.id==auth.user.id).select().first()\n\trow.update_record(subscribed=subscriptions)\n\t\n@auth.requires_login()\ndef questions():\n\ttagname=request.args(0) or redirect(URL(\'index\'))\n\tpage=request.args(1,cast=int,default=0)\n\titems_per_page=2\n\tlimitby=(page*items_per_page,(page+1)*items_per_page+1)\n\ttagname=str(tagname)\n\tquestion=db().select(db.questions.ALL,limitby=limitby ,orderby=~db.questions.modified_on)\n\treturn dict(tagname=tagname, page=page, items_per_page=items_per_page,user=user,question=question)\n\n@auth.requires_login()\ndef answer():\n\tquestionid=request.args(0, cast=int) or redirect(URL(\'index\'))\n\tform=SQLFORM(db.answer)\n\tquestion=db(db.questions.id==questionid).select(db.questions.ALL)\n\tanswers=db(db.answer.question_id==questionid).select(db.answer.ALL, orderby=~db.answer.created_on)\n\tif form.process().accepted:\n\t\tcur=form.vars.id\n\t\trow=db(db.answer.id==cur).select().first()\n\t\trow.update_record(question_id=questionid)\n\t\trow.update_record(author_name=auth.user.username)\n\t\tredirect(URL(\'answer\', args=questionid))\n\treturn dict(question=question, form=form, answers=answers, questionid=questionid)\n\ndef star():\n\tvars=request.post_vars\n\tqid=str(vars.qid)\n\tprint qid\n\tstars=auth.user.starred\n\tif qid not in stars:\n\t\tstars.insert(0,qid)\n\telse:\n\t\tstars.remove(qid)\n\tprint stars\n\trow=db(db.auth_user.id==auth.user.id).select().first()\n\trow.update_record(starred=stars)\n\t\n@auth.requires_login()\ndef index():\n\tprint auth.user.profile_picture\n\talltags=db().select(db.tags.ALL)\n\tquestion=db().select(db.questions.ALL,orderby=~db.questions.modified_on)\n\treturn dict(user=user,question=question,alltags=alltags)\n\t\n@auth.requires_login()\ndef yourques():\n\tif len(request.args): page=int(request.args[0])\n\telse: page=0\n\titems_per_page=2\n\tlimitby=(page*items_per_page,(page+1)*items_per_page+1)\n\tquestion=db(db.questions.created_by==auth.user.id).select(limitby=limitby,orderby=~db.questions.modified_on)\n\treturn dict(page=page, items_per_page=items_per_page,user=user,question=question,edita="EDIT/DELETE")\n\n@auth.requires_login()\ndef ask():\n\tform=SQLFORM(db.questions)\n\tif form.process().accepted:\n\t\tcur=form.vars.id\n\t\trow=db(db.questions.id==cur).select().first()\n\t\trow.update_record(author_name=auth.user.username)\n\t\tresponse.flash = \'form accepted\'\n\telif form.errors:\n\t\tresponse.flash = \'form has errors\'\n\telse:\n\t\tresponse.flash = \'fill form\'\n\treturn dict(form=form)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n@auth.requires_login()\ndef search():\n\treturn dict(form1=FORM(INPUT(_id=\'keyword1\',_name=\'keyword1\', _onkeyup="ajax(\'callback2\', [\'keyword1\'], \'target1\');")),target_div1=DIV(_id=\'target1\'),form2=FORM(INPUT(_id=\'keyword2\',_name=\'keyword2\', _onkeyup="ajax(\'callback3\', [\'keyword2\'], \'target2\');")),target_div2=DIV(_id=\'target2\'),form3=FORM(INPUT(_id=\'keyword3\',_name=\'keyword3\', _onkeyup="ajax(\'callbackcomb\', [\'keyword3\'], \'target3\');")),target_div3=DIV(_id=\'target3\'))\n\ndef callback2():\n\tif not request.vars.keyword1: return \'\'\n\tquery = db.questions.question.contains(request.vars.keyword1)\n\tques = db(query).select(orderby=db.questions.question)\n\tlinks = [A(p.question, _href=URL(\'answer\',args=p.id)) for p in ques]\n\treturn DIV(*[DIV(k,  _onmouseover="this.style.backgroundColor=\'yellow\'", _onmouseout="this.style.backgroundColor=\'white\'")for k in links])\n\ndef callback3():\n\tif not request.vars.keyword2: return \'\'\n\tques = db(db.questions.author_name.contains(request.vars.keyword2) & (db.questions.anonymous==False)).select(orderby=db.questions.question)\n\t#ques = db(query).select(orderby=db.questions.question)\n\tlinks = [A(p.question+ "(" + p.author_name + ")" , _href=URL(\'answer\',args=p.id)) for p in ques]\n\treturn DIV(*[DIV(k,  _onmouseover="this.style.backgroundColor=\'yellow\'", _onmouseout="this.style.backgroundColor=\'white\'")for k in links])\n\ndef callbackcomb():\n\tif not request.vars.keyword3: return \'\'\n\tquery = db.questions.question.contains(request.vars.keyword3)\n\tques = db(query).select(orderby=db.questions.question)\n\tlinks = [A(p.question + "(Body)",  _href=URL(\'answer\',args=p.id)) for p in ques]\n\tques2 = db(db.questions.author_name.contains(request.vars.keyword2) & (db.questions.anonymous==False)).select(orderby=db.questions.question)\n\tlinks2 = [A(p.question+ "(" + p.author_name + ")" , _href=URL(\'answer\',args=p.id)) for p in ques2]\n\tlinks=links+links2\n\treturn DIV(*[DIV(k,  _onmouseover="this.style.backgroundColor=\'yellow\'", _onmouseout="this.style.backgroundColor=\'white\'")for k in links])\n\n@auth.requires_membership(\'AppAdmn\')\ndef admin():\n\tif len(request.args): page=int(request.args[0])\n\telse: page=0\n\titems_per_page=2\n\tlimitby=(page*items_per_page,(page+1)*items_per_page+1)\n\tques=db().select(db.questions.ALL,limitby=limitby,orderby=~db.questions.created_on)\n\treturn dict(page=page, items_per_page=items_per_page,user=user,ques=ques)\n\n\ndef validate():\n\tvars=request.post_vars\n\tqid=(vars.qid)\n\trow=db(db.questions.id==qid).select().first()\n\trow.update_record(judged=True,sensible=True)\ndef devalidate():\n\tvars=request.post_vars\n\tqid=(vars.qid)\n\trow=db(db.questions.id==qid).select().first()\n\trow.update_record(judged=True,sensible=False)\n\n\ndef edita():\n        row=db.questions(request.args(0,cast=int))\n\tform=SQLFORM(db.questions,row,deletable=True)\n\tform.process(detect_record_change=True)\n\tx=row.created_by\n\tprint x\n\tif x!=auth.user.id:\n\t\treturn dict(form="Not Authorised")\n\tif form.accepted:\n\t \trow.update()\n\t\tresponse.flash = \'Recipe Updated\'\n\t\tredirect(URL(\'yourques\'))\n\telif form.errors:\n\t\tresponse.flash = \'Fill The Form Correctly\'\n\telse:\n\t\tresponse.flash = \'Edit The Form as Per Your Choice\'\n\treturn dict(form=form)\n\n\ndef like():\n\tnewbie="Newbie"\n\tunderdog="Underdog"\n\trisingstar="risingstar"\n\tallrounder="Allrounder"\n\tmaster="Master"\n\tsensei="Sensei"\n\tvars=request.post_vars\n\tanswerid=vars.answerid\n\trow=db(db.answer.id==int(answerid)).select().first()\n\trow1=db(db.auth_user.id==row.created_by).select().first()\n\ttotallikes=int(row1.totalupvotes)\n\tliked=row.upvote\n\tuserid=str(auth.user.id)\n\tif userid not in liked:\n\t\ttotallikes=totallikes+1\n\t        liked.insert(0,userid)\n\telse:\n\t        totallikes=totallikes-1\n\t        liked.remove(userid)\n\trow1.update_record(totalupvotes=totallikes)\n\trow.update_record(upvote=liked)\n\tif totallikes < 2:\n\t        row1.update_record(category=newbie)\n\telif totallikes > 2 and totallikes <= 50: \n\t        row1.update_record(category=underdog)\n\telif totallikes > 50 and totallikes <=100:\n\t        row1.update_record(category=risingstar)\n\telif totallikes > 100 and totallikes <=500:\n\t        row1.update_record(category=allrounder)\n\telif totallikes > 500 and totallikes <=100:\n\t        row1.update_record(category=master)\n\telif totallikes > 1000:\n\t        row1.update_record(category=sensei)\n\treturn len(liked)\n\n@auth.requires_login()\ndef profile():\n\tif request.args(0)==\'hello\':\n\t\tuserid=auth.user.id\n\telse:\n\t\tuserid=request.args(0) or redirect(URL(\'index\'))\n\tuser=db(db.auth_user.id==userid).select().first()\n\tquestions=db(db.questions.created_by==userid & db.questions.anonymous==False).select(orderby=~db.questions.created_on)\n\tquestionsforanswers=db().select(db.questions.ALL)\n\treturn dict(user=user,questions=questions,questionsforanswers=questionsforanswers)\n\n@auth.requires_login()\ndef starred():\n\tquestions=db().select(db.questions.ALL)\n\treturn dict(questions=questions)\n\n\nresponse._vars=response._caller(profile)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/pranav/sem2/ITWS2/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/pranav/sem2/ITWS2/web2py/applications/quora/controllers/default.py", line 257, in <module>\n  File "/home/pranav/sem2/ITWS2/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/pranav/sem2/ITWS2/web2py/gluon/tools.py", line 4236, in f\n    return action(*a, **b)\n  File "/home/pranav/sem2/ITWS2/web2py/applications/quora/controllers/default.py", line 247, in profile\n    questions=db(db.questions.created_by==userid & db.questions.anonymous==False).select(orderby=~db.questions.created_on)\nTypeError: unsupported operand type(s) for &: \'str\' and \'Field\'\n'
p11
s.